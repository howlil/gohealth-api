generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  googleId      String?         @unique
  email         String         @unique
  password      String?
  name          String
  age           Int?
  gender        GENDER? // Male, Female, Other
  height        Float? // in cm
  weight        Float? // in kg
  activityLevel ACTIVITYLEVEL? // Sedentary, Lightly Active, Moderately Active, Very Active, Extra Active
  profileImage  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  meals            UserMeal[]
  bmiRecords       BMIRecord[]
  weightGoals      WeightGoal[]
  nutritionTargets DailyNutritionTarget[]
  favoriteFoods    FavoriteFood[]
  activities       UserActivity[]
  activityPlans    ActivityPlan[]
}

enum GENDER {
  MALE
  FEMALE
}

enum ACTIVITYLEVEL {
  SEDENTARY
  LIGHTLY
  ACTIVE
  MODERATELY_ACTIVE
  VERY_ACTIVE
  EXTRA_ACTIVE
}

model FoodCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  foods Food[]

  @@index([slug])
}

model Food {
  id           String       @id @default(cuid())
  name         String
  categoryId   String
  protein      Float        @default(0)
  fat          Float        @default(0)
  carbohydrate Float        @default(0)
  calory       Float        @default(0)
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  category      FoodCategory   @relation(fields: [categoryId], references: [id])
  userMeals     UserMeal[]
  favoriteFoods FavoriteFood[]

  @@index([categoryId])
  @@index([name])
  @@index([isActive])
}

model FavoriteFood {
  id              String   @id @default(uuid())
  userId          String
  foodId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id])
  food            Food     @relation(fields: [foodId], references: [id])

  @@unique([userId, foodId])
  @@index([userId])
}

enum MEAL_TYPE {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

model UserMeal {
  id              String    @id @default(uuid())
  userId          String
  foodId          String
  mealType        MEAL_TYPE
  date            String    // Changed from DateTime to String (DD-MM-YYYY)
  quantity        Float     @default(1)
  unit            String    @default("porsi")
  totalCalories   Float
  totalProtein    Float
  totalFat        Float
  totalCarbs      Float
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id])
  food            Food      @relation(fields: [foodId], references: [id])

  @@index([userId, date])
  @@index([foodId])
  @@index([mealType])
  @@index([userId, mealType, date])
}

model ActivityType {
  id          String        @id @default(uuid())
  name        String        @unique
  category    ACTIVITY_TYPE // Cardio, Strength, Flexibility, Sports, Daily Activities
  metValue    Float // Metabolic Equivalent of Task
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  userActivities    UserActivity[]
  plannedActivities PlannedActivity[]
}

enum ACTIVITY_TYPE {
  CARDIO
  STRENGTH
  FLEXIBILITY
  SPORTS
  DAILY
}

enum USER_ACTIVITY {
  LOW
  MODERATE
  HIGH
}

model UserActivity {
  userId         String
  activityTypeId String
  date           String         // Changed from DateTime to String (DD-MM-YYYY)
  duration       Float          // in minutes
  caloriesBurned Float
  intensity      USER_ACTIVITY? // Low, Moderate, High
  notes          String?
  startTime      DateTime?
  endTime        DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  user         User         @relation(fields: [userId], references: [id])
  activityType ActivityType @relation(fields: [activityTypeId], references: [id])

  @@id([userId, activityTypeId])
  @@index([userId, date])
  @@index([activityTypeId])
}

model ActivityPlan {
  id          String    @id @default(uuid())
  userId      String
  name        String
  description String?
  startDate   String    // Changed from DateTime to String (DD-MM-YYYY)
  endDate     String?   // Changed from DateTime to String (DD-MM-YYYY)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user              User              @relation(fields: [userId], references: [id])
  plannedActivities PlannedActivity[]

  @@index([userId, isActive])
}

model PlannedActivity {
  activityPlanId  String
  activityTypeId  String
  dayOfWeek       Int // 0-6 (Sunday-Saturday)
  scheduledTime   DateTime @db.Time
  plannedDuration Float // in minutes
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  activityPlan ActivityPlan @relation(fields: [activityPlanId], references: [id])
  activityType ActivityType @relation(fields: [activityTypeId], references: [id])

  @@id([activityPlanId, activityTypeId])
  @@index([activityPlanId])
  @@index([activityTypeId])
}

model BMIRecord {
  id         String   @id @default(uuid())
  userId     String
  height     Float // in cm
  weight     Float // in kg
  bmi        Float
  status     BMI // Underweight, Normal, Overweight, Obese
  recordedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  nutritionSummary Json? // Ringkasan gizi per histori BMI

  user User @relation(fields: [userId], references: [id])

  @@index([userId, recordedAt])
}

enum BMI {
  UNDERWEIGHT
  NORMAL
  OVERWEIGHT
  OBESE
}

model WeightGoal {
  id           String    @id @default(uuid())
  userId       String
  startWeight  Float     // in kg
  targetWeight Float     // in kg
  startDate    String    // Changed from DateTime to String (DD-MM-YYYY)
  targetDate   String?   // Changed from DateTime to String (DD-MM-YYYY)
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId, isActive])
}

model DailyNutritionTarget {
  id            String   @id @default(uuid())
  userId        String
  calories      Float
  protein       Float
  carbohydrates Float
  fat           Float
  fiber         Float
  effectiveDate String   // Changed from DateTime to String (DD-MM-YYYY)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId, effectiveDate])
  @@index([userId, isActive])
}
